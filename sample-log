       // ðŸ”¹ Enable MSAL internal logging here
        com.microsoft.aad.msal4j.Logger msalLogger = new com.microsoft.aad.msal4j.Logger();
        msalLogger.setLoggingOptions(new LoggingOptions(
            LogLevel.VERBOSE,   // Verbose = detailed logging
            true,               // PII enabled (youâ€™ll see user and token info)
            true                // Use default logger (stdout)
        ));


import com.microsoft.aad.msal4j.*;

import java.io.InputStream;
import java.net.HttpURLConnection;
import java.net.URL;
import java.util.List;
import java.util.Map;

public class LoggingHttpClient implements IHttpClient {

    @Override
    public HttpResponse send(HttpRequest request) throws Exception {
        System.out.println("=== MSAL Request ===");
        System.out.println(request.url());
        System.out.println(request.headers());
        if (request.body() != null) {
            System.out.println(new String(request.body()));
        }

        // Create connection
        URL url = new URL(request.url());
        HttpURLConnection conn = (HttpURLConnection) url.openConnection();
        conn.setRequestMethod(request.method());

        // Set headers
        for (Map.Entry<String, List<String>> header : request.headers().entrySet()) {
            for (String value : header.getValue()) {
                conn.setRequestProperty(header.getKey(), value);
            }
        }

        // Send body if POST/PUT
        if (request.body() != null) {
            conn.setDoOutput(true);
            conn.getOutputStream().write(request.body());
        }

        // Get response
        int status = conn.getResponseCode();
        InputStream is = status >= 400 ? conn.getErrorStream() : conn.getInputStream();
        byte[] responseBody = is != null ? is.readAllBytes() : null;

        HttpResponse response = new HttpResponse(status, responseBody, conn.getHeaderFields());

        System.out.println("=== MSAL Response ===");
        System.out.println(status);
        System.out.println(conn.getHeaderFields());
        if (responseBody != null) {
            System.out.println(new String(responseBody));
        }

        return response;
    }
}







// Simple implementation of HttpResponse for MSAL4J
class SimpleHttpResponse implements HttpResponse {
    private final int statusCode;
    private final byte[] body;
    private final Map<String, List<String>> headers;

    public SimpleHttpResponse(int statusCode, byte[] body, Map<String, List<String>> headers) {
        this.statusCode = statusCode;
        this.body = body;
        this.headers = headers;
    }

    @Override
    public int statusCode() {
        return statusCode;
    }

    @Override
    public Map<String, List<String>> headers() {
        return headers;
    }

    @Override
    public byte[] body() {
        return body;
    }
}
